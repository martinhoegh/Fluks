@import 'configuration.less';
// --------------------------------------------------
// Flexbox LESS mixins
// The spec: http://www.w3.org/TR/css3-flexbox
// --------------------------------------------------
 
// Flexbox display
// flex or inline-flex
.flex-display(@display: flex) when (@prefixed = 0) {
  display: @display;
}
.flex-display(@display: flex) when (default()) {
	display: ~"-webkit-@{display}";
	display: ~"-moz-@{display}";
	display: ~"-ms-@{display}box"; // IE10 uses -ms-flexbox
	display: ~"-ms-@{display}"; // IE11
	display: @display;
}
 
// The 'flex' shorthand
// - applies to: flex items
// <positive-number>, initial, auto, or none
.flex(@columns: initial) when (@prefixed = 0) {
          flex: @columns;
}
.flex(@columns: initial) when (default()) {
  -webkit-flex: @columns;
     -moz-flex: @columns;
      -ms-flex: @columns;
          flex: @columns;
}
 
// Flex Flow Direction
// - applies to: flex containers
// row | row-reverse | column | column-reverse
.flex-direction(@direction: row) when (@prefixed = 0) {
  flex-direction: @direction;
}
.flex-direction(@direction: row) when (default()) {
  -webkit-flex-direction: @direction;
     -moz-flex-direction: @direction;
      -ms-flex-direction: @direction;
          flex-direction: @direction;
}

// Flex Line Wrapping
// - applies to: flex containers
// nowrap | wrap | wrap-reverse
.flex-wrap(@wrap: nowrap) when (@prefixed = 0) {
  flex-wrap: @wrap;
}
.flex-wrap(@wrap: nowrap) when (default()) {
  -webkit-flex-wrap: @wrap;
     -moz-flex-wrap: @wrap;
      -ms-flex-wrap: @wrap;
          flex-wrap: @wrap;
} 
// Flex Direction and Wrap
// - applies to: flex containers
// <flex-direction> || <flex-wrap>
.flex-flow(@flow) when (@prefixed = 0) {
          flex-flow: @flow;
}
.flex-flow(@flow) when (default()) {
  -webkit-flex-flow: @flow;
     -moz-flex-flow: @flow;
      -ms-flex-flow: @flow;
          flex-flow: @flow;
} 
// Display Order
// - applies to: flex items
// <integer>
.flex-order(@order: 0) when (@prefixed = 0) {
          order: @order;
}
.flex-order(@order: 0) when (default()) {
          order: @order;
}
 
// Flex grow factor
// - applies to: flex items
// <number>
.flex-grow(@grow: 0) when (@prefixed = 0) {
          flex-grow: @grow;
}
.flex-grow(@grow: 0) when (default()) {
  -webkit-flex-grow: @grow;
     -moz-flex-grow: @grow;
      -ms-flex-grow: @grow;
          flex-grow: @grow;
}
 
// Flex shrink
// - applies to: flex item shrink factor
// <number> 
.flex-shrink(@shrink: 1) when (@prefixed = 0) {
          flex-shrink: @shrink;
}
.flex-shrink(@shrink: 1) when (default()) {
  -webkit-flex-shrink: @shrink;
     -moz-flex-shrink: @shrink;
      -ms-flex-shrink: @shrink;
          flex-shrink: @shrink;
} 
// Flex basis
// - the initial main size of the flex item
// - applies to: flex itemsnitial main size of the flex item
// <width> 
.flex-basis(@width: auto) when (@prefixed = 0) {
          flex-basis: @width;
}
.flex-basis(@width: auto) when (default()) {
  -webkit-flex-basis: @width;
     -moz-flex-basis: @width;
      -ms-flex-basis: @width;
          flex-basis: @width;
} 
// Axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | space-between | space-around 
.justify-content(@justify: flex-start) when (@prefixed = 0) {

          justify-content: @justify;
}
.justify-content(@justify: flex-start) when (default()) {
  -webkit-justify-content: @justify;
     -moz-justify-content: @justify;
      -ms-justify-content: @justify;
          justify-content: @justify;
}
// Packing Flex Lines
// - applies to: multi-line flex containers
// flex-start | flex-end | center | space-between | space-around | stretch 
.align-content(@align: stretch) when (@prefixed = 0) {

          align-content: @align;
}
.align-content(@align: stretch) when (default()) {
  -webkit-align-content: @align;
     -moz-align-content: @align;
      -ms-align-content: @align;
          align-content: @align;
} 
// Cross-axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | baseline | stretch 
.align-items(@align: stretch) when (@prefixed = 0) {
          align-items: @align;
}
.align-items(@align: stretch) when (default()) {
  -webkit-align-items: @align;
     -moz-align-items: @align;
      -ms-align-items: @align;
          align-items: @align;
} 
// Cross-axis Alignment
// - applies to: flex items
// auto | flex-start | flex-end | center | baseline | stretch 
.align-self(@align: auto) when (@prefixed = 0) {
          align-self: @align;
}
.align-self(@align: auto) when (default()) {
  -webkit-align-self: @align;
     -moz-align-self: @align;
      -ms-align-self: @align;
          align-self: @align;
}